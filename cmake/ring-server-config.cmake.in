# ring-server-config.cmake.in - CMake package configuration file for Ring Server Engine

@PACKAGE_INIT@

# include version information
include("${CMAKE_CURRENT_LIST_DIR}/ring-server-config-version.cmake")

# include target file
include("${CMAKE_CURRENT_LIST_DIR}/ring-server-targets.cmake")

# check all required dependencies
include(CMakeFindDependencyMacro)

# check and find Threads library
find_dependency(Threads)

# check and find OpenSSL (if enabled)
@PACKAGE_OPENSSL_DEPENDENCY@

# check and find Lua (if enabled)
@PACKAGE_LUA_DEPENDENCY@

# check and find SQLite (if enabled)
@PACKAGE_SQLITE_DEPENDENCY@

# check and find Redis (if enabled)
@PACKAGE_REDIS_DEPENDENCY@

# check and find MySQL (if enabled)
@PACKAGE_MYSQL_DEPENDENCY@

# check and find system spdlog (if used)
@PACKAGE_SPDLOG_DEPENDENCY@

# check and find Boost (if using Boost.Asio)
@PACKAGE_BOOST_DEPENDENCY@

# Set variables for other projects to query
set(RING_SERVER_VERSION @RING_SERVER_VERSION@)
set(RING_SERVER_INCLUDE_DIRS "@PACKAGE_INCLUDE_INSTALL_DIR@")
set(RING_SERVER_LIBRARY_DIRS "@PACKAGE_LIB_INSTALL_DIR@")
set(RING_SERVER_MODULES @RING_SERVER_MODULES@)

# set compile definitions
set(RING_SERVER_DEFINITIONS)

# platform-specific definitions
if(WIN32)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_PLATFORM_WINDOWS)
  if(@USE_IOCP@)
    list(APPEND RING_SERVER_DEFINITIONS -DRING_USE_IOCP)
  endif()
  if(@USE_OVERLAPPED_IO@)
    list(APPEND RING_SERVER_DEFINITIONS -DRING_USE_OVERLAPPED_IO)
  endif()
elseif(APPLE)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_PLATFORM_DARWIN)
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
  list(APPEND RING_SERVER_DEFINITIONS -DRING_PLATFORM_LINUX)
  if(@USE_EPOLL@)
    list(APPEND RING_SERVER_DEFINITIONS -DRING_USE_EPOLL)
  endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "BSD")
  list(APPEND RING_SERVER_DEFINITIONS -DRING_PLATFORM_BSD)
  if(@USE_KQUEUE@)
    list(APPEND RING_SERVER_DEFINITIONS -DRING_USE_KQUEUE)
  endif()
endif()

# compiler-specific definitions
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  list(APPEND RING_SERVER_DEFINITIONS -DRING_COMPILER_GCC)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  list(APPEND RING_SERVER_DEFINITIONS -DRING_COMPILER_CLANG)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  list(APPEND RING_SERVER_DEFINITIONS -DRING_COMPILER_MSVC)
endif()

# feature-specific definitions
if(@ENABLE_SSL@)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_ENABLE_SSL)
endif()

if(@ENABLE_LUA@)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_ENABLE_LUA)
endif()

if(@ENABLE_SQLITE@)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_ENABLE_SQLITE)
endif()

if(@ENABLE_REDIS@)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_ENABLE_REDIS)
endif()

if(@ENABLE_MYSQL@)
  list(APPEND RING_SERVER_DEFINITIONS -DRING_ENABLE_MYSQL)
endif()

# backward compatibility - provide legacy variables
set(RING_SERVER_FOUND TRUE)
set(RING_SERVER_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
set(RING_SERVER_LIBRARIES ring::server)

# provide module variables (if modular library is built)
@PACKAGE_MODULE_VARIABLES@

# message after find_package
message(STATUS "Found ring-server: @PACKAGE_INCLUDE_INSTALL_DIR@ (version @RING_SERVER_VERSION@)")

# provide macro to simplify usage
macro(ring_server_use_target target)
  if(TARGET ring::server)
    target_link_libraries(${target} PRIVATE ring::server)
  else()
    message(FATAL_ERROR "ring::server target not found")
  endif()
endmacro()

# provide function to check specific features
function(ring_server_has_feature FEATURE RESULT)
  if(FEATURE STREQUAL "SSL")
    set(${RESULT} @ENABLE_SSL@ PARENT_SCOPE)
  elseif(FEATURE STREQUAL "LUA")
    set(${RESULT} @ENABLE_LUA@ PARENT_SCOPE)
  elseif(FEATURE STREQUAL "SQLITE")
    set(${RESULT} @ENABLE_SQLITE@ PARENT_SCOPE)
  elseif(FEATURE STREQUAL "REDIS")
    set(${RESULT} @ENABLE_REDIS@ PARENT_SCOPE)
  elseif(FEATURE STREQUAL "MYSQL")
    set(${RESULT} @ENABLE_MYSQL@ PARENT_SCOPE)
  else()
    set(${RESULT} FALSE PARENT_SCOPE)
  endif()
endfunction()